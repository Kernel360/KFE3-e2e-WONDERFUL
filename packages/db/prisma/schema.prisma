generator client {
  provider      = "prisma-client-js"
  output        = "../src/generated"
  binaryTargets = ["native", "rhel-openssl-1.0.x", "rhel-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id              String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email           String             @unique @db.VarChar(255)
  password        String             @db.VarChar(255)
  phone           String?            @unique @db.VarChar(20)
  isVerified      Boolean            @default(false) @map("is_verified")
  profileImg      String?            @map("profile_img")
  nickname        String             @unique @db.VarChar(50)
  createdAt       DateTime           @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime?          @map("updated_at") @db.Timestamptz(6)
  addresses       Address?
  alerts          Alert[]
  auctionItems    AuctionItem[]      @relation("SellerItems")
  bids            Bid[]
  chatMessages    ChatMessage[]
  chat_room_reads chat_room_reads[]
  chatRoomsBuyer  ChatRoom[]         @relation("BuyerChatRooms")
  chatRoomsSeller ChatRoom[]         @relation("SellerChatRooms")
  favoriteItems   FavoriteItem[]
  locations       Location[]
  sales           Sale[]
  notifications   UserNotification[]

  @@map("users")
}

model Location {
  id           String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId       String        @map("user_id") @db.Uuid
  locationName String?       @map("location_name") @db.VarChar(100)
  latitude     Decimal?      @db.Decimal(9, 6)
  longitude    Decimal?      @db.Decimal(9, 6)
  isPrimary    Boolean       @default(false) @map("is_primary")
  auctionItems AuctionItem[]
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("locations")
}

model Address {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId        String    @unique @db.Uuid
  label         String?   @default("Nullable")
  userName      String?   @default("Not Null")
  phone         String?   @default("Nullable")
  address       String?   @default("Not Null")
  addressDetail String?   @default("Nullable")
  isPrimary     Boolean?  @default(false)
  createdAt     DateTime? @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime? @default(now()) @updatedAt @db.Timestamptz(6)
  user          User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("addresses")
}

model Alert {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId        String   @map("user_id") @db.Uuid
  title         String?  @db.VarChar(100)
  content       String?  @db.VarChar(255)
  alertCategory String?  @map("alert_category") @db.VarChar(50)
  isRead        Boolean  @default(false) @map("is_read")
  createdAt     DateTime @map("created_at") @db.Timestamptz(6)
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("alerts")
}

model FavoriteItem {
  id        String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String      @map("user_id") @db.Uuid
  itemId    String      @map("item_id") @db.Uuid
  createdAt DateTime    @map("created_at") @db.Timestamptz(6)
  item      AuctionItem @relation(fields: [itemId], references: [id], onDelete: Cascade)
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, itemId])
  @@map("favorite_items")
}

model Category {
  id           String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String        @unique @db.VarChar(100)
  auctionItems AuctionItem[]

  @@map("categories")
}

model AuctionItem {
  id            String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sellerId      String         @map("seller_id") @db.Uuid
  auctionType   String         @map("auction_type") @db.VarChar(20)
  title         String         @db.VarChar(255)
  description   String?
  categoryId    String         @map("category_id") @db.Uuid
  locationId    String?        @map("location_id") @db.Uuid
  startTime     DateTime?      @map("start_time") @db.Timestamptz(6)
  endTime       DateTime       @map("end_time") @db.Timestamptz(6)
  status        String         @default("ACTIVE") @db.VarChar(20)
  thumbnailUrl  String?        @map("thumbnail_url")
  createdAt     DateTime       @map("created_at") @db.Timestamptz(6)
  auctionImages AuctionImage[]
  category      Category       @relation(fields: [categoryId], references: [id])
  location      Location?      @relation(fields: [locationId], references: [id], onDelete: Restrict)
  seller        User           @relation("SellerItems", fields: [sellerId], references: [id], onDelete: Cascade)
  auctionPrice  AuctionPrice?
  bids          Bid[]
  chatRooms     ChatRoom[]
  favoriteItems FavoriteItem[]
  sales         Sale[]

  @@map("auction_items")
}

model AuctionPrice {
  id                  String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  itemId              String      @unique @map("item_id") @db.Uuid
  startPrice          Int         @map("start_price")
  instantPrice        Int?        @map("instant_price")
  minBidUnit          Int         @map("min_bid_unit")
  currentPrice        Int         @map("current_price")
  isInstantBuyEnabled Boolean     @default(false) @map("is_instant_buy_enabled")
  isExtendedAuction   Boolean     @default(false) @map("is_extended_auction")
  item                AuctionItem @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@map("auction_prices")
}

model Bid {
  id        String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  itemId    String      @map("item_id") @db.Uuid
  bidderId  String      @map("bidder_id") @db.Uuid
  price     Int
  createdAt DateTime    @map("created_at") @db.Timestamptz(6)
  bidder    User        @relation(fields: [bidderId], references: [id], onDelete: Cascade)
  item      AuctionItem @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@map("bids")
}

model AuctionImage {
  id     String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  itemId String      @map("item_id") @db.Uuid
  urls   String[]
  item   AuctionItem @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@map("auction_images")
}

model Sale {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  itemId        String      @map("item_id") @db.Uuid
  buyerId       String      @map("buyer_id") @db.Uuid
  finalPrice    Int         @map("final_price")
  paymentStatus String      @map("payment_status") @db.VarChar(50)
  result        String      @db.VarChar(50)
  createdAt     DateTime    @map("created_at") @db.Timestamptz(6)
  buyer         User        @relation(fields: [buyerId], references: [id], onDelete: Cascade)
  item          AuctionItem @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@map("sales")
}

model ChatRoom {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  auctionId       String            @map("auction_id") @db.Uuid
  sellerId        String            @map("seller_id") @db.Uuid
  buyerId         String            @map("buyer_id") @db.Uuid
  createdAt       DateTime          @map("created_at") @db.Timestamptz(6)
  isDeleted       Boolean           @default(false) @map("is_deleted")
  lastMessageAt   DateTime?         @map("last_message_at") @db.Timestamptz(6)
  last_message_id String?           @db.Uuid
  messages        ChatMessage[]
  chat_room_reads chat_room_reads[]
  auction         AuctionItem       @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  buyer           User              @relation("BuyerChatRooms", fields: [buyerId], references: [id], onDelete: Cascade)
  seller          User              @relation("SellerChatRooms", fields: [sellerId], references: [id], onDelete: Cascade)

  @@map("chat_rooms")
}

model ChatMessage {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  roomId          String            @map("room_id") @db.Uuid
  senderId        String            @map("sender_id") @db.Uuid
  content         String?
  sentAt          DateTime          @map("sent_at") @db.Timestamptz(6)
  type            String            @default("common")
  room            ChatRoom          @relation(fields: [roomId], references: [id], onDelete: Cascade)
  sender          User              @relation(fields: [senderId], references: [id], onDelete: Cascade)
  chat_room_reads chat_room_reads[]

  @@map("chat_messages")
}

model UserNotification {
  id               String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId           String   @map("user_id") @db.Uuid
  notificationType String   @map("notification_type") @db.VarChar(20)
  tokenData        Json     @map("token_data")
  deviceInfo       String?  @map("device_info") @db.VarChar(255)
  platform         String?  @db.VarChar(20)
  isActive         Boolean  @default(true) @map("is_active")
  createdAt        DateTime @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, notificationType])
  @@map("user_notifications")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model accounts {
  id            BigInt    @id @default(autoincrement())
  userId        String?   @default("Not Null")
  bankName      String?   @default("Not Null")
  accountNumber String?   @default("Not Null")
  holderName    String?   @default("Not Null")
  isPrimary     Boolean?  @default(false)
  created_at    DateTime? @default(now()) @db.Timestamptz(6)
  updated_at    DateTime? @db.Timestamptz(6)
}

model chat_room_reads {
  room_id              String      @db.Uuid
  user_id              String      @db.Uuid
  last_read_message_id String      @db.Uuid
  updated_at           DateTime    @default(now()) @db.Timestamptz(6)
  last_read_at         DateTime?   @db.Timestamptz(6)
  chat_messages        ChatMessage @relation(fields: [last_read_message_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  chat_rooms           ChatRoom    @relation(fields: [room_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users                User        @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([room_id, user_id])
}
