name: PR Preview Deploy

on:
  pull_request_target:
    types: [opened, synchronize, reopened, closed]
    branches: [develop]

jobs:
  # PR 프리뷰 배포 (팀 레포 → 개인 레포)
  deploy-preview:
    if: github.repository == 'Kernel360/KFE3-e2e-WONDERFUL' && github.event.action != 'closed'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout personal repo
        uses: actions/checkout@v4
        with:
          repository: miniseung/KFE3-e2e-WONDERFUL
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          fetch-depth: 0

      - name: Setup Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      - name: Get PR info
        id: pr-info
        env:
          PR_NUMBER: ${{ github.event.number }}
          PR_BRANCH: ${{ github.event.pull_request.head.ref }}
          PR_SHA: ${{ github.event.pull_request.head.sha }}
          PR_AUTHOR: ${{ github.event.pull_request.user.login }}
        run: |
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "pr_branch=$PR_BRANCH" >> $GITHUB_OUTPUT
          echo "pr_sha=$PR_SHA" >> $GITHUB_OUTPUT
          echo "pr_author=$PR_AUTHOR" >> $GITHUB_OUTPUT

      - name: Add team repo as upstream
        run: |
          git remote add upstream https://github.com/Kernel360/KFE3-e2e-WONDERFUL.git || true
          git fetch upstream

      - name: Add PR author's fork as remote
        env:
          PR_AUTHOR: ${{ steps.pr-info.outputs.pr_author }}
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: |
          # PR 작성자의 포크 레포를 remote로 추가
          PR_FORK_URL="https://$GITHUB_TOKEN@github.com/$PR_AUTHOR/KFE3-e2e-WONDERFUL.git"
          echo "🔗 PR 작성자 포크 추가: https://github.com/$PR_AUTHOR/KFE3-e2e-WONDERFUL.git"

          git remote add pr-fork "$PR_FORK_URL" || true
          git fetch pr-fork

      - name: Create preview branch
        env:
          PR_NUMBER: ${{ steps.pr-info.outputs.pr_number }}
          PR_AUTHOR: ${{ steps.pr-info.outputs.pr_author }}
          PR_BRANCH: ${{ steps.pr-info.outputs.pr_branch }}
        run: |
          # 프리뷰 브랜치명: preview/pr-{number}-{author}
          PREVIEW_BRANCH="preview/pr-$PR_NUMBER-$PR_AUTHOR"
          echo "preview_branch=$PREVIEW_BRANCH" >> $GITHUB_ENV

          # 기존 프리뷰 브랜치가 있으면 삭제
          git branch -D "$PREVIEW_BRANCH" 2>/dev/null || true
          git push origin --delete "$PREVIEW_BRANCH" 2>/dev/null || true

          # PR 작성자의 포크에서 브랜치 찾기
          echo "🔍 PR 브랜치 확인 중: $PR_BRANCH"

          # 방법 1: PR 작성자 포크의 브랜치에서 생성
          if git show-ref --verify --quiet "refs/remotes/pr-fork/$PR_BRANCH"; then
            echo "✅ PR 작성자 포크에서 브랜치 발견: pr-fork/$PR_BRANCH"
            git checkout -b "$PREVIEW_BRANCH" "pr-fork/$PR_BRANCH"
            git push origin "$PREVIEW_BRANCH"
            echo "✅ 프리뷰 브랜치 생성 완료: $PREVIEW_BRANCH"

          # 방법 2: PR HEAD에서 직접 생성 (더 정확함)
          else
            echo "🔄 PR HEAD에서 브랜치 생성"
            git fetch upstream "+refs/pull/$PR_NUMBER/head:refs/remotes/pr-head"
            git checkout -b "$PREVIEW_BRANCH" "pr-head"
            git push origin "$PREVIEW_BRANCH"
            echo "✅ PR HEAD에서 프리뷰 브랜치 생성 완료: $PREVIEW_BRANCH"
          fi

      - name: Post initial deployment comment
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_REPO_TOKEN }}
          PR_NUMBER: ${{ steps.pr-info.outputs.pr_number }}
          PR_BRANCH: ${{ steps.pr-info.outputs.pr_branch }}
          PR_AUTHOR: ${{ steps.pr-info.outputs.pr_author }}
        run: |
          cat > comment.md << EOF
          🚀 **PR #$PR_NUMBER 프리뷰 배포 시작!**

          - **브랜치**: \`$PR_BRANCH\`
          - **작성자**: @$PR_AUTHOR
          - **프리뷰 브랜치**: \`${{ env.preview_branch }}\`

          ⏳ 배포 진행 중... 약 2-3분 후 확인 가능합니다.

          ---
          *자동 생성된 프리뷰 배포입니다.*
          EOF

          curl -X POST \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token $GITHUB_TOKEN" \
            https://api.github.com/repos/Kernel360/KFE3-e2e-WONDERFUL/issues/$PR_NUMBER/comments \
            -d "{\"body\": $(cat comment.md | jq -Rs .)}"

          echo "✅ 초기 배포 댓글 작성 완료!"

      - name: Wait for Preview Deployment to be Live
        env:
          PR_NUMBER: ${{ steps.pr-info.outputs.pr_number }}
        run: |
          set -e
          PREVIEW_URL="https://kfe3-wonderful-$(echo ${{ env.preview_branch }} | sed 's/\//-/g')-miniseungs-projects.vercel.app"

          echo "🔍 프리뷰 배포 완료 대기 중: $PREVIEW_URL"

          for i in {1..30}; do
            echo "프리뷰 사이트 확인 중... (시도 $i/30)"
            
            STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$PREVIEW_URL" || echo "000")
            
            if [ "$STATUS_CODE" -eq 200 ]; then
              echo "✅ 프리뷰 배포가 완료되었습니다!"
              echo "preview_url=$PREVIEW_URL" >> $GITHUB_ENV
              exit 0
            elif [ "$STATUS_CODE" -eq 404 ]; then
              echo "⏳ 아직 배포 중입니다... (404)"
            else
              echo "⏳ 배포 확인 중... (상태 코드: $STATUS_CODE)"
            fi
            
            sleep 10
          done

          echo "⚠️ 배포 완료 확인에 시간이 오래 걸리고 있습니다."
          echo "preview_url=$PREVIEW_URL" >> $GITHUB_ENV

      - name: Update PR Comment with Live Preview URL
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_REPO_TOKEN }}
          PR_NUMBER: ${{ steps.pr-info.outputs.pr_number }}
          PR_BRANCH: ${{ steps.pr-info.outputs.pr_branch }}
          PR_AUTHOR: ${{ steps.pr-info.outputs.pr_author }}
          PREVIEW_URL: ${{ env.preview_url }}
        run: |
          cat > final_comment.md << EOF
          🚀 **PR #$PR_NUMBER 프리뷰 배포 완료!**

          - **브랜치**: \`$PR_BRANCH\`
          - **작성자**: @$PR_AUTHOR
          - **프리뷰 브랜치**: \`${{ env.preview_branch }}\`
          - **프리뷰 URL**: [$PREVIEW_URL]($PREVIEW_URL)

          ✅ 배포가 완료되었습니다! 위 링크를 클릭하여 변경사항을 확인하세요.

          ---
          *자동 생성된 프리뷰 배포입니다.*
          EOF

          curl -X POST \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token $GITHUB_TOKEN" \
            https://api.github.com/repos/Kernel360/KFE3-e2e-WONDERFUL/issues/$PR_NUMBER/comments \
            -d "{\"body\": $(cat final_comment.md | jq -Rs .)}"

          echo "✅ 프리뷰 배포 완료 댓글 작성 완료!"

  # 프리뷰 브랜치 정리 (PR이 닫히거나 머지될 때)
  cleanup-preview:
    if: github.repository == 'Kernel360/KFE3-e2e-WONDERFUL' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout personal repo
        uses: actions/checkout@v4
        with:
          repository: miniseung/KFE3-e2e-WONDERFUL
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          fetch-depth: 0

      - name: Get PR info for cleanup
        id: cleanup-info
        env:
          PR_NUMBER: ${{ github.event.number }}
          PR_AUTHOR: ${{ github.event.pull_request.user.login }}
        run: |
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "pr_author=$PR_AUTHOR" >> $GITHUB_OUTPUT

      - name: Delete preview branch
        env:
          PR_NUMBER: ${{ steps.cleanup-info.outputs.pr_number }}
          PR_AUTHOR: ${{ steps.cleanup-info.outputs.pr_author }}
        run: |
          PREVIEW_BRANCH="preview/pr-$PR_NUMBER-$PR_AUTHOR"

          echo "🧹 프리뷰 브랜치 정리 중: $PREVIEW_BRANCH"

          # 로컬 브랜치 삭제
          git branch -D "$PREVIEW_BRANCH" 2>/dev/null || echo "로컬 브랜치가 없습니다: $PREVIEW_BRANCH"

          # 원격 브랜치 삭제
          git push origin --delete "$PREVIEW_BRANCH" 2>/dev/null || echo "원격 브랜치가 없습니다: $PREVIEW_BRANCH"

          echo "✅ 프리뷰 브랜치 정리 완료: $PREVIEW_BRANCH"

      - name: Post cleanup comment
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_REPO_TOKEN }}
          PR_NUMBER: ${{ steps.cleanup-info.outputs.pr_number }}
        run: |
          cat > cleanup_comment.md << EOF
          🧹 **프리뷰 배포 정리 완료**

          PR이 닫혔으므로 프리뷰 브랜치와 배포가 정리되었습니다.

          ---
          *자동 정리된 프리뷰 배포입니다.*
          EOF

          curl -X POST \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token $GITHUB_TOKEN" \
            https://api.github.com/repos/Kernel360/KFE3-e2e-WONDERFUL/issues/$PR_NUMBER/comments \
            -d "{\"body\": $(cat cleanup_comment.md | jq -Rs .)}"

          echo "✅ 정리 완료 댓글 작성 완료!"
