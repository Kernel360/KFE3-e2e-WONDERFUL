# .github/workflows/sync-and-deploy.yml
name: Sync to Personal Repo and Deploy

on:
  pull_request_target:
    types: [opened, synchronize, reopened]
    paths:
      - 'apps/web/**'
      - 'packages/**'

  push:
    branches: [main, develop]
    paths:
      - 'apps/web/**'
      - 'packages/**'

jobs:
  preview-deploy:
    if: github.event_name == 'pull_request_target'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout PR code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies & Build
        run: |
          pnpm install --no-frozen-lockfile
          chmod +x ./build.sh
          ./build.sh

      - name: Create optimized Vercel config
        run: |
          cat > vercel.json << 'EOF'
          {
            "version": 2,
            "buildCommand": "cd apps/web && pnpm build",
            "outputDirectory": "apps/web/.next",
            "installCommand": "pnpm install --no-frozen-lockfile",
            "framework": "nextjs",
            "regions": ["icn1"],
            "git": {
              "deploymentEnabled": {
                "main": true,
                "develop": true,
                "preview/pr-*": true
              }
            },
            "functions": {
              "apps/web/app/api/**/*.ts": {
                "maxDuration": 10
              }
            },
            "buildEnv": {
              "TURBO_TELEMETRY_DISABLED": "1"
            }
          }
          EOF

      - name: Setup SSH Key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}

      - name: Push to personal repo preview branch
        run: |
          git config --global user.name "seungmin"
          git config --global user.email "${{ secrets.SEUNG_ACCOUNT_EMAIL }}"

          cd /tmp
          git clone git@github.com:miniseung/KFE3-e2e-WONDERFUL.git personal-repo
          cd personal-repo

          BRANCH_NAME="preview/pr-${{ github.event.pull_request.number }}"

          # 기존 브랜치 삭제
          git push origin --delete $BRANCH_NAME 2>/dev/null || echo "Branch doesn't exist yet"

          # 새 브랜치 생성
          git checkout -b $BRANCH_NAME

          # 기존 파일들 제거 (.git 제외)
          find . -maxdepth 1 ! -name '.' ! -name '..' ! -name '.git' -exec rm -rf {} + 2>/dev/null || true

          # 전체 프로젝트 복사
          echo "📁 Copying project structure..."
          cp -r $GITHUB_WORKSPACE/* . 2>/dev/null || true

          # 숨김 파일들 복사 (.git 제외)
          find $GITHUB_WORKSPACE -maxdepth 1 -name ".*" ! -name ".git" -exec cp -r {} . \; 2>/dev/null || true

          # 최적화된 Vercel 설정 적용
          cp $GITHUB_WORKSPACE/vercel.json .

          echo "📦 Final structure verification:"
          echo "Root files:"
          ls -la | head -10
          echo "Apps/web structure:"
          ls -la apps/web/ | head -10
          echo "Build output:"
          ls -la apps/web/.next/ | head -5

          # 커밋 및 푸시
          git add .
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "🧪 Preview Deploy from PR #${{ github.event.pull_request.number }} - $(date)"
            git push origin $BRANCH_NAME
            echo "✅ Successfully pushed to preview branch: $BRANCH_NAME"
          fi

      - name: Wait for Vercel deployment
        run: |
          echo "⏳ Waiting for Vercel to process the deployment..."
          sleep 90

      - name: Comment preview URL on PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.SEUNG_GITHUB_KEY }}
          script: |
            const prNumber = context.payload.pull_request.number;
            const previewUrl = `https://kfe3-e2e-wonderful-git-preview-pr-${prNumber}-miniseung.vercel.app`;

            const commentBody = `## 🚀 Vercel Preview 배포 완료

            ✅ **배포 상태**: 성공  
            🔗 **미리보기 링크**: ${previewUrl}  
            📝 **브랜치**: \`preview/pr-${prNumber}\`  
            ⏰ **배포 시간**: ${new Date().toLocaleString('ko-KR')}
            👤 **배포자**: ${{ github.event.pull_request.user.login }}
            🔄 **커밋**: ${{ github.event.pull_request.head.sha }}
            📱 **앱 타입**: Next.js App Router + 모노레포

            > 배포 완료까지 2-3분 정도 소요될 수 있습니다.`;

            try {
              const { data: comments } = await github.rest.issues.listComments({
                issue_number: prNumber,
                owner: context.repo.owner,
                repo: context.repo.repo,
              });

              const botComment = comments.find(comment => 
                comment.user.type === 'Bot' && 
                comment.body.includes('Vercel Preview')
              );

              if (botComment) {
                await github.rest.issues.updateComment({
                  comment_id: botComment.id,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: commentBody
                });
                console.log('✅ 기존 댓글 업데이트 완료');
              } else {
                await github.rest.issues.createComment({
                  issue_number: prNumber,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: commentBody
                });
                console.log('✅ 새 댓글 생성 완료');
              }
            } catch (error) {
              console.error('❌ 댓글 작성 실패:', error);
              console.log(`🔗 수동 확인 URL: ${previewUrl}`);
            }

  sync-production:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout team repo
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies & Build
        run: |
          pnpm install --no-frozen-lockfile
          chmod +x ./build.sh
          ./build.sh

      - name: Create optimized Vercel config
        run: |
          cat > vercel.json << 'EOF'
          {
            "version": 2,
            "buildCommand": "cd apps/web && pnpm build",
            "outputDirectory": "apps/web/.next",
            "installCommand": "pnpm install --no-frozen-lockfile",
            "framework": "nextjs",
            "regions": ["icn1"],
            "git": {
              "deploymentEnabled": {
                "main": true,
                "develop": true,
                "preview/pr-*": true
              }
            },
            "functions": {
              "apps/web/app/api/**/*.ts": {
                "maxDuration": 10
              }
            },
            "buildEnv": {
              "TURBO_TELEMETRY_DISABLED": "1"
            }
          }
          EOF

      - name: Setup SSH Key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}

      - name: Push to personal repo
        run: |
          git config --global user.name "seungmin"
          git config --global user.email "${{ secrets.SEUNG_ACCOUNT_EMAIL }}"

          cd /tmp
          git clone git@github.com:miniseung/KFE3-e2e-WONDERFUL.git personal-repo
          cd personal-repo

          TARGET_BRANCH="${{ github.ref_name }}"
          echo "🎯 Target branch: $TARGET_BRANCH"

          # 브랜치 체크아웃 또는 생성
          git checkout $TARGET_BRANCH || git checkout -b $TARGET_BRANCH

          # 기존 파일 제거 (.git 제외)
          find . -maxdepth 1 ! -name '.' ! -name '..' ! -name '.git' -exec rm -rf {} + 2>/dev/null || true

          # 전체 프로젝트 복사
          echo "📁 Copying project structure..."
          cp -r $GITHUB_WORKSPACE/* . 2>/dev/null || true
          find $GITHUB_WORKSPACE -maxdepth 1 -name ".*" ! -name ".git" -exec cp -r {} . \; 2>/dev/null || true

          # 최적화된 Vercel 설정 적용
          cp $GITHUB_WORKSPACE/vercel.json .

          echo "📦 Production deployment verification:"
          echo "✅ Root structure: $(ls -1 | wc -l) items"
          echo "✅ Apps/web exists: $([ -d "apps/web" ] && echo "YES" || echo "NO")"
          echo "✅ Build output: $([ -d "apps/web/.next" ] && echo "YES" || echo "NO")"
          echo "✅ Package files: $([ -f "package.json" ] && echo "YES" || echo "NO")"

          # 커밋 및 푸시
          git add .
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "🚀 Production Deploy from $TARGET_BRANCH branch - $(date)"
            git push origin $TARGET_BRANCH
            echo "✅ Successfully deployed to $TARGET_BRANCH branch"
          fi

      - name: Create deployment summary
        run: |
          TARGET_BRANCH="${{ github.ref_name }}"

          if [ "$TARGET_BRANCH" = "main" ]; then
            ENVIRONMENT="🚀 프로덕션"
            VERCEL_URL="https://kfe3-e2e-wonderful.vercel.app"
          else
            ENVIRONMENT="🧪 스테이징"
            VERCEL_URL="https://kfe3-e2e-wonderful-git-$TARGET_BRANCH-miniseung.vercel.app"
          fi

          echo "$ENVIRONMENT **배포 완료**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **배포 상태**: 성공" >> $GITHUB_STEP_SUMMARY
          echo "🔗 **배포 링크**: $VERCEL_URL" >> $GITHUB_STEP_SUMMARY
          echo "📝 **브랜치**: \`$TARGET_BRANCH\`" >> $GITHUB_STEP_SUMMARY
          echo "⏰ **배포 시간**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "👤 **배포자**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "📱 **앱 구조**: Next.js App Router (apps/web)" >> $GITHUB_STEP_SUMMARY
          echo "🏗️ **빌드 도구**: pnpm + Turborepo" >> $GITHUB_STEP_SUMMARY
