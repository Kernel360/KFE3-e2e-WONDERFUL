# .github/workflows/sync-and-deploy.yml
name: Sync to Personal Repo and Deploy

on:
  # Fork PR에서도 작동하도록 pull_request_target 사용
  pull_request_target:
    types: [opened, synchronize, reopened]
    paths:
      - 'apps/web/**'
      - 'packages/**'

  # main/develop 브랜치에 push 시 해당 브랜치로 배포
  push:
    branches: [main, develop]
    paths:
      - 'apps/web/**'
      - 'packages/**'

jobs:
  # PR 프리뷰 배포 (Fork PR 포함)
  preview-deploy:
    if: github.event_name == 'pull_request_target'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout PR code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies & Build
        run: |
          pnpm install --no-frozen-lockfile
          sh ./build.sh

      - name: Setup SSH Key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}

      - name: Push to personal repo preview branch
        run: |
          # Git 설정
          git config --global user.name "seungmin"
          git config --global user.email "${{ secrets.SEUNG_ACCOUNT_EMAIL }}"

          # 임시 디렉토리에서 개인 레포 클론
          cd /tmp
          git clone git@github.com:miniseung/KFE3-e2e-WONDERFUL.git personal-repo
          cd personal-repo

          # 기존 브랜치가 있으면 삭제 후 새로 생성
          BRANCH_NAME="preview/pr-${{ github.event.pull_request.number }}"
          git push origin --delete $BRANCH_NAME 2>/dev/null || echo "Branch doesn't exist yet"

          # 기존 파일 제거 후 새 파일 복사
          rm -rf * .*  2>/dev/null || true
          cp -r $GITHUB_WORKSPACE/output/* . 2>/dev/null || true
          cp -r $GITHUB_WORKSPACE/output/.* . 2>/dev/null || true

          # 새 브랜치 생성
          git checkout -b $BRANCH_NAME

          # 커밋 및 푸시 (개인 레포로)
          git add .
          git commit -m "🧪 Preview Deploy from PR #${{ github.event.pull_request.number }} - $(date)" || echo "No changes"
          git push origin $BRANCH_NAME

      - name: Wait for Vercel deployment
        run: sleep 30

      - name: Create deployment summary
        run: |
          echo "🚀 **Vercel Preview 배포 완료**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **배포 상태**: 성공" >> $GITHUB_STEP_SUMMARY
          echo "🔗 **미리보기 링크**: https://kfe3-e2e-wonderful-git-preview-pr-${{ github.event.pull_request.number }}-miniseung.vercel.app" >> $GITHUB_STEP_SUMMARY
          echo "📝 **브랜치**: \`preview/pr-${{ github.event.pull_request.number }}\`" >> $GITHUB_STEP_SUMMARY
          echo "⏰ **배포 시간**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "👤 **배포자**: ${{ github.event.pull_request.user.login }}" >> $GITHUB_STEP_SUMMARY

      - name: Comment preview URL on PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.SEUNG_GITHUB_KEY }}
          script: |
            const prNumber = context.payload.pull_request.number;
            const previewUrl = `https://kfe3-e2e-wonderful-git-preview-pr-${prNumber}-miniseung.vercel.app`;

            console.log(`🔗 배포 URL: ${previewUrl}`);
            console.log(`📝 PR 번호: ${prNumber}`);

            try {
              // 기존 봇 댓글 찾기
              const { data: comments } = await github.rest.issues.listComments({
                issue_number: prNumber,
                owner: context.repo.owner,
                repo: context.repo.repo,
              });
              
              console.log(`📄 총 댓글 수: ${comments.length}`);

              const botComment = comments.find(comment => 
                comment.user.type === 'Bot' && 
                comment.body.includes('Vercel Preview')
              );

              const commentBody = `## 🚀 Vercel Preview 배포 완료

            ✅ **배포 상태**: 성공  
            🔗 **미리보기 링크**: ${previewUrl}  
            📝 **브랜치**: \`preview/pr-${prNumber}\`  
            ⏰ **배포 시간**: ${new Date().toLocaleString('ko-KR')}
            👤 **배포자**: ${{ github.event.pull_request.user.login }}
            🔄 **커밋**: ${{ github.event.pull_request.head.sha }}

            > 변경사항이 반영되려면 1-2분 정도 소요될 수 있습니다.`;

              if (botComment) {
                console.log(`🔄 기존 댓글 업데이트 중... (ID: ${botComment.id})`);
                await github.rest.issues.updateComment({
                  comment_id: botComment.id,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: commentBody
                });
                console.log('✅ 기존 댓글 업데이트 완료');
              } else {
                console.log('💬 새 댓글 생성 중...');
                const response = await github.rest.issues.createComment({
                  issue_number: prNumber,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: commentBody
                });
                console.log(`✅ 새 댓글 생성 완료 (ID: ${response.data.id})`);
              }
            } catch (error) {
              console.error('❌ 댓글 작성 실패 상세:', error);
              console.error('❌ 에러 스택:', error.stack);
              
              // 댓글 실패해도 배포 URL은 로그에 출력
              console.log('🔗 배포는 성공했습니다. URL을 확인하세요:');
              console.log(`   ${previewUrl}`);
            }

  # main/develop 브랜치 동기화 (브랜치별로 다른 환경에 배포)
  sync-production:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout team repo
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies & Build
        run: |
          pnpm install --no-frozen-lockfile
          sh ./build.sh

      - name: Setup SSH Key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}

      - name: Push to personal repo (branch-specific)
        run: |
          # Git 설정
          git config --global user.name "seungmin"
          git config --global user.email "${{ secrets.SEUNG_ACCOUNT_EMAIL }}"

          # 임시 디렉토리에서 개인 레포 클론
          cd /tmp
          git clone git@github.com:miniseung/KFE3-e2e-WONDERFUL.git personal-repo
          cd personal-repo

          # 현재 브랜치명 가져오기 (develop 또는 main)
          TARGET_BRANCH="${{ github.ref_name }}"
          echo "🎯 Target branch: $TARGET_BRANCH"

          # 해당 브랜치로 이동 (없으면 생성)
          git checkout $TARGET_BRANCH || git checkout -b $TARGET_BRANCH

          # 기존 파일 제거 후 새 파일 복사
          rm -rf * .*  2>/dev/null || true
          cp -r $GITHUB_WORKSPACE/output/* . 2>/dev/null || true
          cp -r $GITHUB_WORKSPACE/output/.* . 2>/dev/null || true

          # 커밋 및 푸시 (개인 레포로)
          git add .
          git commit -m "🚀 Production Deploy from $TARGET_BRANCH branch - $(date)" || echo "No changes"
          git push origin $TARGET_BRANCH

          echo "✅ Successfully deployed to $TARGET_BRANCH branch"

      - name: Create deployment summary
        run: |
          TARGET_BRANCH="${{ github.ref_name }}"

          if [ "$TARGET_BRANCH" = "main" ]; then
            ENVIRONMENT="🚀 프로덕션"
            VERCEL_URL="https://kfe3-e2e-wonderful.vercel.app"
          else
            ENVIRONMENT="🧪 스테이징"
            VERCEL_URL="https://kfe3-e2e-wonderful-git-$TARGET_BRANCH-miniseung.vercel.app"
          fi

          echo "$ENVIRONMENT **배포 완료**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **배포 상태**: 성공" >> $GITHUB_STEP_SUMMARY
          echo "🔗 **배포 링크**: $VERCEL_URL" >> $GITHUB_STEP_SUMMARY
          echo "📝 **브랜치**: \`$TARGET_BRANCH\`" >> $GITHUB_STEP_SUMMARY
          echo "⏰ **배포 시간**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "👤 **배포자**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
